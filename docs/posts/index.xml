<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Just another Jedi...</title>
    <link>https://pcolladosoto.github.io/posts/</link>
    <description>Recent content in Posts on Just another Jedi...</description>
    <image>
      <title>Just another Jedi...</title>
      <url>https://pcolladosoto.github.io/me.png</url>
      <link>https://pcolladosoto.github.io/me.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 15 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://pcolladosoto.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Some fun Git facts I&#39;ve come across</title>
      <link>https://pcolladosoto.github.io/posts/git-fun-facts/</link>
      <pubDate>Mon, 15 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://pcolladosoto.github.io/posts/git-fun-facts/</guid>
      <description>Some fun Git facts I&amp;rsquo;ve come across Even though I don&amp;rsquo;t get to spend as much time with git as I would like, I still manage to find some interesting and fun facts I had no idea existed in the first place.
Instead of jotting them down some place I would surely forget, I decided to collect them here so that I know where to find them. I&amp;rsquo;m bound to run into them sometime in the future at least&amp;hellip;</description>
    </item>
    
    <item>
      <title>Checking a system&#39;s endianness</title>
      <link>https://pcolladosoto.github.io/posts/endianness/</link>
      <pubDate>Tue, 26 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://pcolladosoto.github.io/posts/endianness/</guid>
      <description>So&amp;hellip; what&amp;rsquo;s endianness? Put simply, the endianness of a machine tells us how that machine&amp;rsquo;s memory is organised. In order to fully grasp what that means we need to take a small step back and take a look at how we interact with a computer&amp;rsquo;s memory.
Before we begin note we&amp;rsquo;ll make extensive use of hexadecimal (i.e. hex) numbers. When we&amp;rsquo;re using them we&amp;rsquo;ll prefix them with 0x.
What was memory again?</description>
    </item>
    
    <item>
      <title>Persistently modifying an operating system image</title>
      <link>https://pcolladosoto.github.io/posts/img-mod/</link>
      <pubDate>Tue, 26 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://pcolladosoto.github.io/posts/img-mod/</guid>
      <description>Why would we want to do this? I personally love Raspberry Pis: they are super versatile and I&amp;rsquo;m always thinking of new ways to use them.
Instead of hooking up a keyboard and mouse to them I&amp;rsquo;m used to deploying them headlessly: I just plug them in and have them connect my home network so that I can interact with them over SSH. This however poses some difficulties:
How can I configure a static IP address beforehand?</description>
    </item>
    
    <item>
      <title>Controlling access through a WireGuard VPN</title>
      <link>https://pcolladosoto.github.io/posts/wg-acl/</link>
      <pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://pcolladosoto.github.io/posts/wg-acl/</guid>
      <description>Why would we want to control access to a machine? In an ideal world, we wouldn&amp;rsquo;t need to protect our own machines: nobody would try to break into them in the first place.
The truth, however, is that we should always control who can access our servers and computers when we expose them publicly. Let&amp;rsquo;s take a look at a common scenario.
Securing SSH When setting up servers we usually leave port 22 open: that&amp;rsquo;s where the SSH daemon (i.</description>
    </item>
    
    <item>
      <title>Setting up a WireGuard VPN</title>
      <link>https://pcolladosoto.github.io/posts/wg-setup/</link>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://pcolladosoto.github.io/posts/wg-setup/</guid>
      <description>So&amp;hellip; what are VPNs really? Well, that&amp;rsquo;s not really a straightforward question. Put simply, Virtual Private Networks (that&amp;rsquo;s where VPN comes from :gasp:) allow us to leverage public networks such as the Internet in such a way that those communicating through the VPN really think they&amp;rsquo;re on a real private network: they have no idea their traffic is actually traversing public networks at all!
Now, this can be accomplished in several ways: we have IPsec and MPLS-based VPNs for instance.</description>
    </item>
    
    <item>
      <title>An introduction to subnetting in IP networks</title>
      <link>https://pcolladosoto.github.io/posts/ip-subnetting/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pcolladosoto.github.io/posts/ip-subnetting/</guid>
      <description>What was an IP again? Let&amp;rsquo;s start at the &amp;lsquo;beginning&amp;rsquo;. When computers communicate among themselves they need to refer to other parties involved in the communication in some way or another. In the context of today&amp;rsquo;s Internet, machines identify themselves through IP addresses.
Notice how the entire article is named &amp;lsquo;What was an IP again?&amp;rsquo;. That is purposefully incorrect. In order to understand why, we need to take a (small) step back and briefly visit the OSI Model.</description>
    </item>
    
    <item>
      <title>Cross Compiling stuff with Docker</title>
      <link>https://pcolladosoto.github.io/posts/cross-cc/</link>
      <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pcolladosoto.github.io/posts/cross-cc/</guid>
      <description>Do we really have to compile stuff in the 21st century? Short answer: yes. Long answer: it really depends on the context you develop programs in, but chances are you&amp;rsquo;ll end up running into compilation at some point&amp;hellip;
Old school programming languages like C and C++ are compiled languages, that is, their source files (*.c and *.cpp, respectively) must be compiled (and probably linked and whatnot) into an executable that can later be executed.</description>
    </item>
    
  </channel>
</rss>
